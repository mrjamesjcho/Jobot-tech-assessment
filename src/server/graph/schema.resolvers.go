package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"time"

	"github.com/mrjamesjcho/jobot-assessment/src/server/graph/model"
)

// CreatePing is the resolver for the createPing field.
func (r *mutationResolver) CreatePing(ctx context.Context) (*model.Ping, error) {
	ping := &model.Ping{
		Timestamp: time.Now().UTC().Format(time.DateTime),
	}
	r.ping = ping
	return ping, nil
}

// LatestPing is the resolver for the latestPing field.
func (r *queryResolver) LatestPing(ctx context.Context) (*model.Ping, error) {
	return r.ping, nil
}

// LatestPing is the resolver for the latestPing field.
func (r *subscriptionResolver) LatestPing(ctx context.Context) (<-chan *model.Ping, error) {
	// First you'll need to `make()` your channel. Use your type here!
	ch := make(chan *model.Ping)

	// You can (and probably should) handle your channels in a central place outside of `schema.resolvers.go`.
	// For this example we'll simply use a Goroutine with a simple loop.
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			// Prepare your object.
			ping := r.ping

			// The subscription may have got closed due to the client disconnecting.
			// Hence we do send in a select block with a check for context cancellation.
			// This avoids goroutine getting blocked forever or panicking,
			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				// Handle deregistration of the channel here. `close(ch)`
				return // Remember to return to end the routine.

			case ch <- ping: // This is the actual send.
				// Our message went through, do nothing
			}
		}
	}()

	// We return the channel and no error.
	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
